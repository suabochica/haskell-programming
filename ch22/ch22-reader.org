
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+OPTIONS: toc:nil num:nil timestamp:nil
#+OPTIONS: reveal_width:1200 reveal_height:800 reveal_progress:t reveal_center:t
#+REVEAL_TRANS: zoom
#+REVEAL_THEME: night
#+REVEAL_INIT_OPTIONS: slideNumber:true
#+REVEAL_PLUGINS: (highlight)

#+TITLE: Reader
#+DESCRIPTION: Lifting is the "cheat mode" of tetris.
#+AUTHOR: Sergio Benítez
#+DATE: December 11th, 2020

* Note
  :PROPERTIES:
  :reveal_background: #292D3E
  :END:

  Foldable, Traversable, Reader, State, and Parsers are not strictly necessary
to understanding and using Haskell.

* Outline
- the ~Reader~ context
- examine the Functor, Applicative, and Monad instances for /functions/;
- the ~Reader~ newtype;
- examples using ~Reader~

* Reader context
  When writing applications, programmers often need to pass around some
information that may be needed intermittently or universally throughout an
entire application.

Pass this information as functions arguments is not enough because it would be
present in the type of almost every function. This will make the code harder to
read and harder to maintain. To address this, we use the *Reader* Monad.

* A new beginning
The boop doop example.

#+begin_src haskell
boop :: Integer -> Integer
boop = (*2)


doop :: Integer -> Integer
doop = (+10)

bip :: Integer -> Integer
bip = boop . doop
#+end_src

** Functorial context

#+begin_notes
With “functorial context” we mean the structure that the function is being
lifted over in order to apply to the value inside. For example, a list is a 
functorial context we can lift functions over.

We say that the function gets lifted over the structure of the list and applied
to or mapped over the values that are inside the list.
#+end_notes

#+begin_src haskell
-- Functorial context
-- We can write it like

bloop :: Integer -> Integer
bloop = fmap boop doop
#+end_src

** Applicative context

#+begin_notes
We’d use this when two functions would share the same input and we want to apply
some other function to the result of those to reach a final result
#+end_notes

#+begin_src haskell
-- Applicative context
bbop :: Integer -> Integer
bbop = (+) <$> boop <*> doop

duwop :: Integer -> Integer
duwop = liftA2 (+) boop doop
#+end_src

** Monadic context

#+begin_notes
We assign the variable 𝑎 to the partially-applied function boop, and 𝑏 to doop.
As soon as we receive an input, it will fill the empty slots in boop and doop.
The results will be bound to the variables 𝑎 and 𝑏 and passed into return.
#+end_notes

#+begin_src haskell
-- Monadic context
boopDoop :: Integer -> Integer
boopDoop = do
  a <- boop
  b <- doop
  return (a + b)
#+end_src

** Conclusion
#+begin_notes
So, we’ve seen here that we can have a Functor, Applicative, and Monad for
partially-applied functions. In all cases, these are awaiting application to one
argument that will allow both functions to be evaluated.

This is the idea of /Reader/. It is a way of stringing functions together when
all those functions are awaiting one input from a shared environment.

The important intuition here is that it’s just another way of abstracting out
function application and gives us a way to do computation in terms of an
argument that hasn’t been supplied yet.
#+end_notes

[[./assets/summary.gif]]

* This is Reader

#+begin_notes
As we saw above, functions have Functor, Applicative, and Monad
instances. Usually when you see or hear the term Reader, it’ll be
referring to the Monad or Applicative instances.
#+end_notes

~Functor~ of functions, we map an ordinary function over another to create a 
new function awaiting a final argument.

~Applicative~ and ~Monad~ instances for the function type give us a way to map a
function that is awaiting an /a/ over another function that is also awaiting an
/a/

With ~Reader~ we are /reading and argument from the environment into functions/. 
It will be especially nice for clarity's sake later when we make the Reader
/monad transformer/

* Breaking down the functor of functions

#+begin_src haskell
-- partially-applied type constructor of functions
instance Functor ((->) r)

-- implementation of the (->) instance
instance Functor ((->) r) where
  fmap = (.)
#+end_src

** The Either functor

#+begin_notes
you have to lift over the (->) 𝑎 is and only transform the 𝑏 value.The 𝑎 is
conventionally called 𝑟 for Reader in these instances, but a type variable of
any other name smells as sweet. Here, r is the first argument of (a -> b):
#+end_notes

#+begin_src haskell
data (->) a b

-- Type constructor of functions
(->)
-- Fully applied a -> b
((->) r) -- is
r ->
-- so r is the type of the
-- argument to the function
#+end_src

#+begin_notes
From this, we can determine that 𝑟, the argument type for functions, is part of
the structure being lifted over when we lift over a function, not the value 
being transformed or mapped over.
#+end_notes

This leaves the result of the function as the value being transformed. This
happens to line up neatly with what function composition is about:

#+begin_src haskell
(.) :: (b -> c) -> (a -> b) -> a -> c
-- or perhaps
(.) :: (b -> c) -> (a -> b) -> (a -> c)
#+end_src

** Functorial lifting for functions

#+begin_src haskell
(.)  :: (b -> c) -> (a -> b) -> (a -> c)
fmap :: Functor f => (a -> b) -> f a -> f b
-- we're going to remove the names of the functions
-- and the typeclass constraint as we can take it for
-- granted from here on out.

:: (b -> c) -> :: (a -> b) -> (a -> c)
:: (b -> c) -> f a -> f b

-- Changing up the letters without changing the meaning
:: (b -> c) -> (a -> b) -> (a -> c) 
:: (b -> c) -> f b -> f c

-- f is ((->) a)
:: (b -> c) -> (a -> b) -> (a -> c) 
:: (b -> c) -> ((->) a) b -> ((->) a) c

-- Unroll the prefix notation into infix
:: (b -> c) -> (a -> b) -> (a -> c)
:: (b -> c) -> (a -> b) -> (a -> c)
#+end_src

* But Reader?
  
Reader is a newtype wrapper for the function type:

#+begin_src haskell
newtype Reader r a =
  Reader { runReader :: r -> a }
#+end_src

The 𝑟 is the type we’re “reading” in and 𝑎 is the result type of our function.

#+begin_notes
The Reader newtype has a handy runReader accessor to get the function out of 
Reader. 
#+end_notes

#+begin_src haskell
instance Functor (Reader r) where
  fmap :: (a -> b) -> Reader r a -> Reader r b
  fmap f (Reader ra) =
    Reader $ \r -> f (ra r)
#+end_src

So what we’re doing here is basically:
1. Unpack ~r ->~ a out of Reader
2. Compose 𝑓 with the function we unpacked out of Reader.
3. Put the new function made from the composition back into Reader.

* The Applicative of functions

#+begin_src haskell
-- Applicative f =>
-- f ~ (->) r
pure :: a -> f a
pure :: a -> (r -> a)

(<*>) :: f (a -> b) -> f a -> f b
(<*>) :: (r -> a -> b) -> (r -> a) -> (r -> b)
#+end_src

As we saw in the Functor instance, the 𝑟 of Reader is part of the 𝑓 structure.
We have two arguments in this function, and both of them are functions waiting
for the 𝑟 input. When that comes, both functions will be applied to return a 
final result of 𝑏.

* The Monad of functions

#+begin_src haskell
(>>=) :: Monad m => m a -> (a -> (m b)) -> m b
               (r -> a) -> (a -> (r -> b)) -> (r -> b)
#+end_src

This is how we get to the Monad of functions. Just as with the
Functor and Applicative instances, the ~((->) r)~ is our structure 

* You can change what comes below, but not above

The “read-only” nature of the type argument 𝑟 means that you can
swap in a different type or value of 𝑟 for functions that you call, but
not for functions that call you.
 
#+begin_src haskell
withReaderT
  :: (r' -> r)
  -- ^ The function to modify the environment.
  -> ReaderT r m a
  -- ^ Computation to run in the modified environment.
  -> ReaderT r' m a
  withReaderT f m = ReaderT $ runReaderT m . f
#+end_src

* You tend to see ~ReaderT~, no ~Reader~

When used in that fashion, it’s a monad transformer and we
put a letter T after the type to indicate when we’re using it as such,
so you’ll usually see ~ReaderT~ in production Haskell code rather than
Reader.

* Thanks
