#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+OPTIONS: toc:nil num:nil timestamp:nil
#+OPTIONS: reveal_width:1200 reveal_height:800 reveal_progress:t reveal_center:t
#+REVEAL_TRANS: zoom
#+REVEAL_THEME: night
#+REVEAL_INIT_OPTIONS: slideNumber:true
#+REVEAL_PLUGINS: (highlight)

#+TITLE: Signaling Adversity
#+DESCRIPTION: Thank goodness we don't have only serius problems, but ridiculous ones as well
#+AUTHOR: Sergio BenÃ­tez

* Outline
The chapter will include:
- ~Nothing~, or ~Just Maybe~
- ~Either~ left or right, but not both
- higher-kindedness
- anamorphisms, but not animorphs

* Signaling adversity
Sometimes it is not convenient for every value in a datatype to make sense for your programs.
When that happens in Haskell the ~Maybe~ and ~Either~ datatypes come to rescue.

* Love ~Nothing~
  
Let's consider the definition of ~Maybe~:

#+begin_src haskell
data Maybe a = Nothing | Just a
#+end_src

~Maybe~ is a very common datatype in Haskell ðŸ˜…

#+begin_notes
Maybe lets us return a default Nothing value when we don't have any sensible values to return for our intended type a
#+end_notes

** Example
   
#+begin_src haskell
ifEvenAdd2 :: Integer -> Integer
ifEvenAdd2 n = if even n then n + 2 else ðŸ¤”?
#+end_src

** Maybe to rescue
   
#+begin_src haskell
ifEvenAdd2 :: Integer -> Maybe Integer
ifEvenAdd2 n = if even n then n + 2 else Nothing
#+end_src

Is an improvement, but still we have some problems

#+begin_notes
Problems with this example:
1. Nothing has the type Maybe a, and a can be assumed to be any type.
2. Error: Couldn't match expected type 'Maybe Integer' with actual type 'Integer'
3. Solution: Wrap into the 'Just' constructor
This is no problem to fix with ~Maybe~
#+end_notes

** Final version
   
#+begin_src haskell
ifEvenAdd2 :: Integer -> Maybe Integer
ifEvenAdd2 n = if even n then Just (n + 2) else Nothing
#+end_src

** Smart constructors for datatype I

Let's consider the next ~Person~ type

#+begin_src haskell
type Name = String
type Age = Integer

data Person = Person Name Age deriving Show
#+end_src

#+begin_notes
Problems with this example:
1. We can construct a Person with an empty string as name
2. We can construct a Person with an negative years old
This is no problem to fix with ~Maybe~
#+end_notes

** Smart constructors for datatype II
Fit the ~Person~ type

:PROPERTIES:
#+ATTR_REVEAL: :code_attribs data-line-numbers='1-3'
#+begin_src haskell
type Name = String
type Age = Integer

data Person = Person Name Age deriving Show

mkPerson :: Name -> Age -> Maybe Person
mkPerson :: name age
  | name /= "" && age >= 0 = Just $ Person name age
  | otherwise = Nothing
#+end_src
:END:

#+begin_notes
How to know if was the name, the age or both that was bad?
#+end_notes

** Smart constructors for datatype III
~mkPerson~ is what we call a smart constructor. It allows us to construct values of a type
only when they meet certain criteria, so that we know we have a valid value,
and return an explicit signal when we do not.

* Bleating ~Either~ 

Let's check the ~Either~ datatype

#+begin_src haskell
data Either a b = Left a | Right b
#+end_src

** Remember the goal
   
What we want is a way to know /why/ our inputs were incorrect /if/ they were incorrect

** Initial proposal I

Define and ~PersonInvalid~ data constructor,
#+begin_src haskell
data PersonInvalid = NameEmpty 
                   | AgeTooLow
                   deriving (Eq, Show)
#+end_src

#+begin_notes
~Eq~ because otherwise we cannot equality check the constructors
#+end_notes

and use it in the definition of the ~mkPerson~ data type:

#+begin_src haskell
mkPerson :: Name -> Age -> Either PersonInvalid Person
#+end_src

** Initial proposal II

#+begin_src haskell
type Name = String
type Age = Integer

data Person = Person Name Age deriving Show
data PersonInvalid = NameEmpty
                   | AgeTooLow
                   deriving (Eq, Show)

mkPerson :: Name
          -> Age
          -> Either PersonInvalid Person

mkPerson name age
| name /= "" && age >= 0 = Right $ Person name age
| name = "" = Left NameEmpty
| otherwise = Left AgeTooLow
#+end_src

** The ~Left~ and ~Right~ Convention
   
We use ~Left~ as our invalid or error constructor for a couple of
reasons. It is conventional to do so in Haskell, but that convention
came about for a reason. The reason has to do with the ordering of
type arguments and application of functions.

#+begin_quote
~Functor~ spoiler
#+end_quote

** Another problem
We can't identify when both inputs are incorrect

** The final version
#+begin_src haskell
type Name = String
type Age = Integer
type ValidatePerson a = Either [PersonInvalid] a

data Person = Person Name Age deriving Show
data PersonInvalid = NameEmpty
                   | AgeTooLow
                   deriving (Eq, Show)

ageOkay :: Age -> Either [PersonInvalid] Age
ageOkay age = case age >= 0 of
  True -> Right age
  False -> Left [AgeTooLow]

nameOkay :: Name -> Either [PersonInvalid] Name
nameOkay name = case name /= "" of
  True -> Right name
  False -> Left [NameEmpty]

mkPerson :: Name
         -> Age
         -> Either ValidatePerson Person

mkPerson name age =
  mkPerson' (nameOkay name) (ageOkay age)

mkPerson' :: ValidatePerson Name
          -> ValidatePerson Age
          -> ValidatePerson Person
  
mkPerson' (Right nameOk) (Right ageOk) =
  Right (Person nameOk ageOk)
mkPerson' (Left badName) (Left badAge) =
  Left (Person badName ++ badAge)
mkPerson' (Left badName) _ = Left badName
mkPerson' (Left badAge) _ = Left badAge
#+end_src
   
* Kinds, a thousand stars in your types
  
Kinds are types one level up. They are used to describe the types
of type constructors. One noteworthy feature of Haskell is that it
has /higher-kinded types/

** Haskell report convention
   
   - /Type constant/: types that no take arguments and already are types (e.g ~Int~, ~Bool~, ~Char~)
   - /Type constructor/: types which must have arguments applied to become a type
   
#+begin_quote
Remember: The syntax ~::~ usually means "has type of"
#+end_quote

** Type constructor example
   
#+begin_src haskell
data Exampe a = Blah | RoofGoats | Woot a
#+end_src

~Example~ is a type constructor rather than a constant because it takes a type
argument /~a~/ which is used with the ~Woot~ data constructor

#+begin_src haskell
Prelude> :k Example
Example :: * -> *
#+end_src

** ~Maybe~ and ~Either~ are type constructors
   
The ~Maybe~ and ~Either~ datatypes weâ€™ve just reviewed also have type
constructors rather than constants. They have to be applied to an
argument before they become concrete types.

#+begin_src haskell
  Prelude> :k Maybe
  Maybe :: * -> *
  
  Prelude> :k Maybe Int
  Maybe Int :: *
#+end_src

#+begin_src haskell
  Prelude> :k Either
  Either :: * -> * -> *

  Prelude> :k Either Int
  Maybe Int :: * -> 
  
  Prelude> :k Either Int String
  Maybe Int String :: * 
#+end_src

** Lifted and unlifted types

|            | Lifted                                      | Unlifted                                       |
|------------+---------------------------------------------+------------------------------------------------|
| Symbol     | *                                           | #                                              |
| Definition | Any type which can be inhabited by /bottom/ | Any type which cannot be inhabited by /bottom/ |
| Example    | Mostly the datatype we have seen and use    | Native machine types, and raw pointers         |

** Data constructors are functions
   
Remember that the difference between data constants and data constructors is the /arity/.
Data constants are nullary, while data constructors are n-ary, and, for the second case
once you apply them to their arguments, they return a value of the appropriate type.
*i.e. data constructors really are functions.*

** Examples
   
Nullary case

#+begin_src haskell
  Prelude> data Trivial = Trivial deriving Show
  Prelude> Trivial 1 -- error: match type 'Integer -> t' to 'Trivial'
#+end_src

Unary case

#+begin_src haskell
  Prelude> data UnaryCase = UnaryCase Int deriving Show
  Prelude> :t UnaryCase
  UnaryCase :: Int -> UnaryCase
  Prelude> UnaryCase 21
  UnaryCase 21

  Prelude> UnaryCase "blah" -- error: match type '[Char]' to 'Integer'
#+end_src

* Anamorphism

While the idea of catamorphisms is still relatively fresh in our minds,
letâ€™s turn our attention to their dual: /anamorphisms/:

- *folds*, or catamorphisms, let us break data structures down then
- *unfolds*, or anamorphisms, let us build them up

** Unfold: ~iterate~ and ~unfoldr~
   
~iterate~ is a very limited unfold that never ends, then we must use ~take~ to get a finite list

#+begin_src haskell
Prelude> :t iterate
iterate :: (a -> a) -> a -> [a] haskell

Prelude> take 10 $ iterate (+1) 0
[0,1,2,3,4,5,6,7,8,9]
#+end_src

~unfoldr~ is more general unfold, the full monty as it were, and we can get the same thing as ~iterate~

#+begin_src haskell
Prelude> :t unfoldr
unfoldr :: (b -> Maybe (a, b)) -> b -> [a]

Prelude> take 10 $ unfoldr (\b -> Just (b, b+1)) 0
[0,1,2,3,4,5,6,7,8,9]
#+end_src

* Definitions
1. A higher kinded type is any type whose kind has a function arrow in it and which can be described
as a type constructor rather than a type constant:

Example of higher kind:

#+begin_src haskell
Maybe  :: * -> *
[]     :: * -> *
Either :: * -> * -> *
[->]     :: * -> * -> *
#+end_src

Example of not higher kind:

#+begin_src haskell
Int    :: *
Char   :: *
String :: *
[Char] :: *
#+end_src

#+begin_quote
Note: This is not to be confused with higher kinded /polymorphism/
#+end_quote

* Thanks
